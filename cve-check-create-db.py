import os
import gzip
import json
import sqlite3
import tempfile
import urllib.request
import argparse

from datetime import date

NVD_DATA_FEED_URL_TEMPLATE = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-%s.json.gz'
NVD_START_YEAR = 2002

def create_db(filename):
	if os.path.exists(filename):
		os.remove(filename)

	db = sqlite3.connect(filename)
	cursor = db.cursor()
	cursor.execute('''CREATE TABLE cve (
		id text,
		vendor text,
		product text,
		is_patches integer,
		version_start text,
		version_start_inclusive integer,
		version_end text,
		version_end_inclusice integer)''')
	db.commit()
	
	return db

def is_patch_available(cve):
	if 'references' in cve:
		references = cve['references']
		ref_data = references['reference_data']
		for ref in ref_data:
			tags = ref['tags']
			if 'Patch' in tags:
				return True
	return False


def add_cves(list, id, is_patched, nodes):
	for node in nodes:
		for match in node['cpe_match']:
			if 'cpe23Uri' in match:
				cpe = match['cpe23Uri'].split(':')
				if cpe[0] == 'cpe' and cpe[1] == '2.3' and cpe[2] != 'h':
					vendor = cpe[3]
					product = cpe[4]
					version_start = cpe[5]
					version_start_inclusive = True
					version_end_inclusive = True
					version_end = cpe[5]
					if 'versionStartIncluding' in match:
						version_start = match['versionStartIncluding']
					if 'versionStartExcluding' in match:
						version_end = match['versionStartExcluding']
						version_start_inclusive = False
					if 'versionEndIncluding' in match:
						version_end = match['versionEndIncluding']
					if 'versionEndExcluding' in match:
						version_end = match['versionEndExcluding']
						version_end_inclusive = False
					full_id = '%s:%s:%s:%s%s,%s%s' % (
						id,
						vendor,
						product,
						'[' if version_start_inclusive else '(',
						version_start,
						version_end,
						']' if version_end_inclusive else ')'
					)
					list[full_id] = {
						'cve': id,
						'vendor': vendor,
						'product': product,
						'version_start': version_start,
						'version_start_inclusive': version_start_inclusive,
						'version_end': version_end,
						'version_end_inclusive': version_end_inclusive,
						'is_patched': is_patched
					}
		children = node['children']
		add_cves(list, id, is_patched, children)

def add_cve_file(db, tempdir, name):
	url = NVD_DATA_FEED_URL_TEMPLATE % (name)
	filename = os.path.join(tempdir, "nvd-%s.json.gz" % (name))
	
	print("downloading %s..." % url)
	urllib.request.urlretrieve(url, filename)

	print("parsing %s..." % filename)
	with gzip.open(filename, 'rt', errors='ignore') as f:
		data = json.load(f)

	cve_list = {}
	cve_items = data['CVE_Items']
	for item in cve_items:
		cve = item['cve']
		cve_id = cve['CVE_data_meta']['ID']
		is_patched = is_patch_available(cve)
		configs = item['configurations']
		nodes = configs['nodes']
		add_cves(cve_list, cve_id, is_patched, nodes)
	
	print("adding CVEs...")
	cursor = db.cursor()
	for cve in cve_list.values():
		cursor.execute("INSERT INTO cve VALUES (?, ?, ?, ?, ?, ?, ?, ?)", (
			cve['cve'],
			cve['vendor'],
			cve['product'],
			1 if cve['is_patched'] else 0,
			cve['version_start'],
			1 if cve['version_start_inclusive'] else 0,
			cve['version_end'],
			1 if cve['version_end_inclusive'] else 0
		))
	db.commit()


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Create CVE database.')
	parser.add_argument('-f', '--file', type=str, default='cve.db', help='filename of database')
	args = parser.parse_args()

	with tempfile.TemporaryDirectory() as tempdir:
		print("creating database %s..." % args.file)
		db = create_db(args.file)
		
		today = date.today()
		for year in range(NVD_START_YEAR, today.year + 1):
			add_cve_file(db, tempdir, year)
		add_cve_file(db, tempdir, 'modified')

		db.close()
		print("finished")
